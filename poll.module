<?php

/**
 * @file
 * Used to aggregate syndicated content (RSS, RDF, and Atom).
 */

use Drupal\poll\PollInterface;
use Drupal\Component\Utility\Xss;
use Drupal\poll\Entity\Poll;
use Drupal\field\Field;
use Drupal\Component\Utility\String;
use Drupal\Core\Template\Attribute;
use Drupal\poll\PollStorageInterface;
use Drupal\Core\Entity\EntityInterface;

/**
 * Denotes that the poll is not published.
 */
const POLL_NOT_PUBLISHED = 0;

/**
 * Denotes that the poll is published.
 */
const POLL_PUBLISHED = 1;

/**
 * Implements hook_theme().
 */
function poll_theme() {
  $theme_hooks = array(
    'poll_vote' => array(
      'template' => 'poll-vote',
      'render element' => 'form',
    ),
    'poll_choices' => array(
      'render element' => 'form',
    ),
    'poll_results' => array(
      'template' => 'poll-results',
      'variables' => array(
        'raw_title' => NULL,
        'results' => NULL,
        'votes' => NULL,
        'raw_links' => NULL,
        'block' => NULL,
        'nid' => NULL,
        'vote' => NULL
      ),
    ),
    'poll_meter' => array(
      'template' => 'poll-meter',
      'variables' => array(
        'display_value' => NULL,
        'form' => NULL,
        'high' => NULL,
        'low' => NULL,
        'max' => NULL,
        'min' => NULL,
        'optimum' => NULL,
        'value' => NULL,
        'percentage' => NULL,
        'attributes' => array()
      ),
    ),
  );

  return $theme_hooks;
}

/**
 * Implements hook_permission().
 */
function poll_permission() {
  return array(
    'administer polls' => array(
      'title' => t('Administer polls'),
    ),
    'access polls' => array(
      'title' => t('View polls'),
    ),
  );
}

/**
 * Implements hook_page_build().
 */
function poll_page_build(&$page) {
  $page['#attached']['library'][] = 'poll/drupal.poll-links';
}

/**
 * Loads a poll.
 *
 * @param int $id
 *   The poll id.
 *
 * @return \Drupal\poll\PollInterface
 *   An object describing the poll.
 */
function poll_load($id) {
  return entity_load('poll', $id);
}

/**
 * Entity URI callback.
 */
function poll_uri($poll) {
  return array(
    'path' => 'poll/' . $poll->id(),
  );
}

function poll_cron() {
  //Unpublish expired polls if their $duration isn't "Unlimited"
  $polls = \Drupal::entityManager()->getStorage('poll')->getExpiredPolls();
  foreach ($polls as $poll) {
    $poll->status->value = 0;
    $poll->save();
  }
}

/**
 * Implements template_preprocess_HOOK() for poll-vote.tpl.php.
 */
function template_preprocess_poll_vote(&$variables) {
  $form = $variables['form'];
  $variables['title'] = String::checkPlain($form['#entity']->label());
  $variables['choice'] = drupal_render($form['choice']);
  $variables['vote'] = drupal_render($form['actions']);
  $variables['rest'] = drupal_render_children($form);
  // @todo:
  if (isset($form['#block'])) {
    $variables['block'] = $form['#block'];
    $variables['theme_hook_suggestions'][] = 'poll_vote__block';
  }
}

/**
 * Prepares variables for meter templates.
 *
 * Default template: poll-meter.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - display_value: The textual representation of the meter bar.
 *   - form: A string specifying one or more forms to which the <meter> element
 *   - attributes: Associative array of attributes to be placed in the meter
 *     tag.
 */
function template_preprocess_poll_meter(&$variables) {

  $attributes = $variables['attributes'];
  foreach (array(
             'form',
             'high',
             'low',
             'max',
             'min',
             'optimum',
             'value'
           ) as $key) {
    if (isset($variables[$key])) {
      // This function was initially designed for the <meter> tag, but due to
      // the lack of browser and styling support for it, we're currently using
      // its attributes as HTML5 data attributes.
      $attributes['data-' . $key] = $variables[$key];
    }
  }

  $variables['attributes'] = new Attribute($attributes);
}

/**
 * Implements template_preprocess_HOOK() for poll-results.tpl.php.
 *
 * @param $variables
 *   An associative array containing:
 *   - raw_title: A string for the title of the poll.
 *   - results: The results of the poll.
 *   - votes: The total results in the poll.
 *   - raw_links: Array containing links in the poll.
 *   - block: A boolean to define if the poll is a block.
 *   - nid: The node ID of the poll.
 *   - vote: The choice number of the current user's vote.
 *   The raw_* inputs to this are naturally unsafe; often safe versions are
 *   made to simply overwrite the raw version, but in this case it seems likely
 *   that the title and the links may be overridden by the theme layer, so they
 *   are left in with a different name for that purpose.
 *
 * @see poll-results.tpl.php
 * @see poll-results--block.tpl.php
 */
function template_preprocess_poll_results(&$variables) {
  $links = array(
    '#theme' => 'links__poll_results',
    '#links' => $variables['raw_links']
  );
  $variables['links'] = drupal_render($links);
  $variables['title'] = String::checkPlain($variables['raw_title']);
  $variables['results_title'] = t('Results');
}
